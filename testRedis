var redis = require("redis");
//var configName = "configName";

 
var url = "localhost";
var instance = redis.getInstance(url, {});
var response = {};
response = instance.rpush("list1", "test1", "test2", "test3");

//return instance.linsert("list1", "BEFORE", "test2", "test4");
response["l1"] = instance.lindex("list1", 0);
response["l2"] = instance.lindex("list1", 1)
response["l3"] = instance.lindex("list1", 2);
response["l4"] = instance.lindex("list1", 3);
return response;
/*var instance = redis.getInstance("localhost", {"testOnBorrow": "false"});
if(instance.metadata && instance.metadata.status == "failure") {
    return instance.metadata.errorCode + ": " + instance.metadata.errorDetail;
}

//response.hstrlen = instance.hstrlen("myhash", "field1");
response.exists1 = instance.hexists("myhash", "field1");
response.set = instance.hset("myhash", "field1", "foo");
response.exists2 = instance.hexists("myhash", "field1");
response.get = instance.hget("myhash", "field1");
response.del1 = instance.hdel("myhash", "field1");
response.del2 = instance.hdel("myhash", "field2");
return response;
*/
//return 123;
//var redos = require("redisAlpha");
/*var redisHost = "localhost";

var redis = require('redisAlpha');
var redisInstance = redis.getInstance(redisHost, {});
var myHash = "myHash" + Math.floor(Math.random() * 1000001);

return {
    'hset': redisInstance.hset(myHash, 'key1', 'value1'),
    'hdel': redisInstance.hdel(myHash, 'key1'),
    'hdelKeyNotFound': redisInstance.hget(myHash, 'someKey')
}
var params = {
  'name': 'redis-62',
  'protocol': 'redis',
  'url': 'localhost',
  'testOnBorrow':'true'
}
var response = apsdb.callApi("SaveExternalEndpointConfiguration", params, null);
return response;
*/
